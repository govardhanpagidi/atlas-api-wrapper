package cloudBackupRestore

import (
	"fmt"

	"github.com/atlas-api-helper/util/constants"
)

// Model is autogenerated from the json schema
type Model struct {
	// The ID of the project.
	//
	// required: false
	ProjectId *string `json:",omitempty"`

	// The name of the cluster.
	//
	// required: false
	ClusterName *string `json:",omitempty"`

	// The name of the instance.
	//
	// required: false
	InstanceName *string `json:",omitempty"`

	// The ID of the restore job.
	//
	// required: false
	Id *string `json:",omitempty"`

	// The delivery type.
	//
	// required: false
	DeliveryType *string `json:",omitempty"`

	// The delivery URL.
	//
	// required: false
	DeliveryUrl []string `json:",omitempty"`

	// Whether the restore job has been cancelled.
	//
	// required: false
	Cancelled *bool `json:",omitempty"`

	// The timestamp when the restore job was created.
	//
	// required: false
	CreatedAt *string `json:",omitempty"`

	// Whether the restore job has expired.
	//
	// required: false
	Expired *bool `json:",omitempty"`

	// The timestamp when the restore job will expire.
	//
	// required: false
	ExpiresAt *string `json:",omitempty"`

	// The timestamp when the restore job was finished.
	//
	// required: false
	FinishedAt *string `json:",omitempty"`

	// The timestamp of the snapshot to restore.
	//
	// required: false
	Timestamp *string `json:",omitempty"`

	// The ID of the snapshot to restore.
	//
	// required: false
	SnapshotId *string `json:",omitempty"`

	// The links associated with the restore job.
	//
	// required: false
	Links []Links `json:",omitempty"`

	// The timestamp of the oplog to restore.
	//
	// required: false
	OpLogTs *string `json:",omitempty"`

	// The increment of the oplog to restore.
	//
	// required: false
	OpLogInc *string `json:",omitempty"`

	// The point in time to restore to, in UTC seconds.
	//
	// required: false
	PointInTimeUtcSeconds *int `json:",omitempty"`

	// The ID of the target project.
	//
	// required: false
	TargetProjectId *string `json:",omitempty"`

	// The name of the target cluster.
	//
	// required: false
	TargetClusterName *string `json:",omitempty"`

	// The profile to use for authentication.
	//
	// required: false
	Profile *string `json:",omitempty"`

	// Whether to enable synchronous creation.
	//
	// required: false
	EnableSynchronousCreation *bool `json:",omitempty"`

	// The options for synchronous creation.
	//
	// required: false
	SynchronousCreationOptions *SynchronousCreationOptions `json:",omitempty"`
}

// Links is autogenerated from the json schema
type Links struct {
	// The relationship of the link to the current resource.
	//
	// required: false
	Rel *string `json:",omitempty"`

	// The URL of the link.
	//
	// required: false
	Href *string `json:",omitempty"`
}

// SynchronousCreationOptions is autogenerated from the json schema
type SynchronousCreationOptions struct {
	// The timeout in seconds.
	//
	// required: false
	TimeOutInSeconds *int `json:",omitempty"`

	// The delay in seconds before the callback is executed.
	//
	// required: false
	CallbackDelaySeconds *int `json:",omitempty"`

	// Whether to return success if the timeout is reached.
	//
	// required: false
	ReturnSuccessIfTimeOut *bool `json:",omitempty"`
}

type InputModel struct {
	// The name of the cluster.
	//
	// required: true
	ClusterName *string `json:"-"`

	// The public key to use for authentication.
	//
	// required: false
	PublicKey *string `json:"-"`

	// The private key to use for authentication.
	//
	// required: false
	PrivateKey *string `json:"-"`

	// The ID of the project.
	//
	// required: false
	ProjectId *string `json:"-"`

	// The ID of the snapshot to restore.
	//
	// required: true
	SnapshotId *string `json:"snapshotId"`

	// The timestamp of the oplog to restore.
	//
	// required: false
	OpLogTs *string `json:"opLogTs,omitempty"`

	// The increment of the oplog to restore.
	//
	// required: false
	OpLogInc *string `json:"opLogInc,omitempty"`

	// The point in time to restore to, in UTC seconds.
	//
	// required: false
	PointInTimeUtcSeconds *string `json:"pointInTimeUtcSeconds,omitempty"`

	// The name of the target cluster.
	//
	// required: false
	TargetClusterName *string `json:"targetClusterName,omitempty"`

	// The ID of the target project.
	//
	// required: false
	TargetProjectId *string `json:"targetProjectId,omitempty"`

	// The ID of the job.
	//
	// required: false
	JobId *string `json:"jobId,omitempty"`

	// The delivery type.
	//
	// required: false
	DeliveryType *string `json:"deliveryType,omitempty"`
}

func (m InputModel) String() string {
	clusterName := constants.EmptyString
	publicKey := constants.EmptyString
	privateKey := constants.EmptyString
	projectId := constants.EmptyString
	snapshotId := constants.EmptyString
	opLogTs := constants.EmptyString
	opLogInc := constants.EmptyString
	pointInTimeUtcSeconds := constants.EmptyString
	targetClusterName := constants.EmptyString
	targetProjectId := constants.EmptyString
	jobId := constants.EmptyString

	if m.ClusterName != nil {
		clusterName = *m.ClusterName
	}

	if m.PublicKey != nil {
		publicKey = *m.PublicKey
	}

	if m.PrivateKey != nil {
		privateKey = *m.PrivateKey
	}

	if m.ProjectId != nil {
		projectId = *m.ProjectId
	}

	if m.SnapshotId != nil {
		snapshotId = *m.SnapshotId
	}

	if m.OpLogTs != nil {
		opLogTs = *m.OpLogTs
	}

	if m.OpLogInc != nil {
		opLogInc = *m.OpLogInc
	}

	if m.PointInTimeUtcSeconds != nil {
		pointInTimeUtcSeconds = *m.PointInTimeUtcSeconds
	}

	if m.TargetClusterName != nil {
		targetClusterName = *m.TargetClusterName
	}

	if m.TargetProjectId != nil {
		targetProjectId = *m.TargetProjectId
	}

	if m.JobId != nil {
		jobId = *m.JobId
	}

	return fmt.Sprintf("InputModel{ClusterName: %s, PublicKey: %s, PrivateKey: %s, ProjectId: %v, SnapshotId: %v, OpLogTs: %s, OpLogInc: %s, PointInTimeUtcSeconds: %s, TargetClusterName: %s, TargetProjectId: %s, JobId: %s}",
		clusterName, publicKey, privateKey, projectId, snapshotId, opLogTs, opLogInc, pointInTimeUtcSeconds, targetClusterName, targetProjectId, jobId)
}
