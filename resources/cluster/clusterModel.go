// Code generated by 'cfn generate', changes will be undone by the next invocation. DO NOT EDIT.
// Updates to this type are made my editing the schema file and executing the 'generate' command.
package cluster

import (
	"encoding/json"
	"fmt"
)

// Model is autogenerated from the json schema
type Model struct {
	// Advanced settings for the cluster.
	//
	// required: false
	AdvancedSettings *ProcessArgs `json:"advancedSettings,omitempty"`

	// Indicates whether backups are enabled for the cluster.
	//
	// required: false
	BackupEnabled *bool `json:"backupEnabled,omitempty"`

	// BI Connector configuration for the cluster.
	//
	// required: false
	BiConnector *BiConnector `json:"biConnector,omitempty"`

	// The type of the cluster.
	//
	// required: false
	ClusterType *string `json:"clusterType,omitempty"`

	// The date the cluster was created.
	//
	// required: false
	CreatedDate *string `json:"createdDate,omitempty"`

	// Connection strings for the cluster.
	//
	// required: false
	ConnectionStrings *ConnectionStrings `json:"connectionStrings,omitempty"`

	// The size of the disk in GB.
	//
	// required: false
	DiskSizeGB *float64 `json:"diskSizeGB,omitempty"`

	// The provider used for encryption at rest.
	//
	// required: false
	EncryptionAtRestProvider *string `json:"encryptionAtRestProvider,omitempty"`

	// The profile used for the cluster.
	//
	// required: false
	Profile *string `json:"profile,omitempty"`

	// The ID of the project the cluster belongs to.
	//
	// required: false
	ProjectId *string `json:"projectId,omitempty"`

	// The ID of the cluster.
	//
	// required: false
	Id *string `json:"id,omitempty"`

	// Labels for the cluster.
	//
	// required: false
	Labels []Labels `json:"labels,omitempty"`

	Tags []Tags `json:"tags,omitempty"`

	// The major version of MongoDB used by the cluster.
	//
	// required: false
	MongoDBMajorVersion *string `json:"mongoDBMajorVersion,omitempty"`

	// The version of MongoDB used by the cluster.
	//
	// required: false
	MongoDBVersion *string `json:"mongoDBVersion,omitempty"`

	// The name of the cluster.
	//
	// required: false
	Name *string `json:"name,omitempty"`

	// Indicates whether the cluster is paused.
	//
	// required: false
	Paused *bool `json:"paused,omitempty"`

	// Indicates whether point-in-time backups are enabled for the cluster.
	//
	// required: false
	PitEnabled *bool `json:"pitEnabled,omitempty"`

	// Replication specifications for the cluster.
	//
	// required: false
	ReplicationSpecs []AdvancedReplicationSpec `json:"replicationSpecs,omitempty"`

	// The type of root certificate used for the cluster.
	//
	// required: false
	RootCertType *string `json:"rootCertType,omitempty"`

	// The state of the cluster.
	//
	// required: false
	StateName *string `json:"stateName,omitempty"`

	// The version release system used for the cluster.
	//
	// required: false
	VersionReleaseSystem *string `json:"versionReleaseSystem,omitempty"`

	// Indicates whether termination protection is enabled for the cluster.
	//
	// required: false
	TerminationProtectionEnabled *bool `json:"terminationProtectionEnabled,omitempty"`

	// Indicates whether public access is enabled for the cluster.
	//
	// required: false
	PublicAccessEnabled *bool `json:"publicAccessEnabled,omitempty"`
}

// ProcessArgs is autogenerated from the json schema
type ProcessArgs struct {
	// The default read concern for the cluster.
	//
	// required: false
	DefaultReadConcern *string `json:"defaultReadConcern,omitempty"`

	// The default write concern for the cluster.
	//
	// required: false
	DefaultWriteConcern *string `json:"defaultWriteConcern,omitempty"`

	// Indicates whether to fail if an index key is too long.
	//
	// required: false
	FailIndexKeyTooLong *bool `json:"failIndexKeyTooLong,omitempty"`

	// Indicates whether JavaScript is enabled for the cluster.
	//
	// required: false
	JavascriptEnabled *bool `json:"javascriptEnabled,omitempty"`

	// The minimum enabled TLS protocol for the cluster.
	//
	// required: false
	MinimumEnabledTLSProtocol *string `json:"minimumEnabledTLSProtocol,omitempty"`

	// Indicates whether table scans are disabled for the cluster.
	//
	// required: false
	NoTableScan *bool `json:"noTableScan,omitempty"`

	// The size of the oplog in MB.
	//
	// required: false
	OplogSizeMB *int `json:"oplogSizeMB,omitempty"`

	// The sample size for the BI Connector.
	//
	// required: false
	SampleSizeBIConnector *int `json:"sampleSizeBIConnector,omitempty"`

	// The sample refresh interval for the BI Connector.
	//
	// required: false
	SampleRefreshIntervalBIConnector *int `json:"sampleRefreshIntervalBIConnector,omitempty"`

	// The minimum retention hours for the oplog.
	//
	// required: false
	OplogMinRetentionHours *float64 `json:"oplogMinRetentionHours,omitempty"`
}

// BiConnector is autogenerated from the json schema
type BiConnector struct {
	// The read preference for the BI Connector.
	//
	// required: false
	ReadPreference *string `json:"readPreference,omitempty"`

	// Indicates whether the BI Connector is enabled.
	//
	// required: false
	Enabled *bool `json:"enabled,omitempty"`
}

// PrivateEndpoint is autogenerated from the json schema
type PrivateEndpoint struct {
	// The connection string for the private endpoint.
	//
	// required: false
	ConnectionString *string `json:"connectionString,omitempty"`

	// The list of endpoints for the private endpoint.
	//
	// required: false
	Endpoints []Endpoint `json:"endpoints,omitempty"`

	// The SRV connection string for the private endpoint.
	//
	// required: false
	SRVConnectionString *string `json:"srvConnectionString,omitempty"`

	// The type of the private endpoint.
	//
	// required: false
	Type *string `json:"type,omitempty"`
}

// ConnectionStrings is autogenerated from the json schema
type ConnectionStrings struct {
	// The standard connection string for the cluster.
	//
	// required: false
	Standard *string `json:"standard,omitempty"`

	// The standard SRV connection string for the cluster.
	//
	// required: false
	StandardSrv *string `json:"standardSrv,omitempty"`

	// The private connection string for the cluster.
	//
	// required: false
	Private *string `json:"private,omitempty"`

	// The private SRV connection string for the cluster.
	//
	// required: false
	PrivateSrv *string `json:"privateSrv,omitempty"`

	// The private endpoint for the cluster.
	//
	// required: false
	PrivateEndpoint []PrivateEndpoint `json:"privateEndpoint,omitempty"`

	// The AWS PrivateLink SRV connection string for the cluster.
	//
	// required: false
	AwsPrivateLinkSrv *string `json:"awsPrivateLinkSrv,omitempty"`

	// The AWS PrivateLink connection string for the cluster.
	//
	// required: false
	AwsPrivateLink *string `json:"awsPrivateLink,omitempty"`
}

// Tags is autogenerated from the json schema
type Tags struct {
	// The key of the label.
	//
	// required: false
	Key *string `json:"key,omitempty"`

	// The value of the label.
	//
	// required: false
	Value *string `json:"value,omitempty"`
}

// Labels is autogenerated from the json schema
type Labels struct {
	// The key of the label.
	//
	// required: false
	Key *string `json:"key,omitempty"`

	// The value of the label.
	//
	// required: false
	Value *string `json:"value,omitempty"`
}

// AdvancedReplicationSpec is autogenerated from the json schema
type AdvancedReplicationSpec struct {
	// The ID of the advanced replication specification.
	//
	// required: false
	ID *string `json:"id,omitempty"`

	// The number of shards for the advanced replication specification.
	//
	// required: false
	NumShards *int `json:"numShards,omitempty"`

	// The advanced region configurations for the advanced replication specification.
	//
	// required: false
	AdvancedRegionConfigs []AdvancedRegionConfig `json:"advancedRegionConfigs,omitempty"`

	// The name of the zone for the advanced replication specification.
	//
	// required: false
	ZoneName *string `json:"zoneName,omitempty"`
}

// AdvancedRegionConfig is autogenerated from the json schema
type AdvancedRegionConfig struct {
	// The auto-scaling configuration for analytics nodes in the region.
	//
	// required: false
	AnalyticsAutoScaling *AdvancedAutoScaling `json:"analyticsAutoScaling,omitempty"`

	// The auto-scaling configuration for all nodes in the region.
	//
	// required: false
	AutoScaling *AdvancedAutoScaling `json:"autoScaling,omitempty"`

	// The name of the region.
	//
	// required: false
	RegionName *string `json:"regionName,omitempty"`

	// The name of the backing provider for the region.
	//
	// required: false
	BackingProviderName *string `json:"BackingProviderName,omitempty"`

	// The name of the provider for the region.
	//
	// required: false
	ProviderName *string `json:"providerName,omitempty"`

	// The specifications for analytics nodes in the region.
	//
	// required: false
	AnalyticsSpecs *Specs `json:"analyticsSpecs,omitempty"`

	// The specifications for electable nodes in the region.
	//
	// required: false
	ElectableSpecs *Specs `json:"electableSpecs,omitempty"`

	// The priority of the region.
	//
	// required: false
	Priority *int `json:"priority,omitempty"`

	// The specifications for read-only nodes in the region.
	//
	// required: false
	ReadOnlySpecs *Specs `json:"readOnlySpecs,omitempty"`
}

// AdvancedAutoScaling is autogenerated from the json schema
type AdvancedAutoScaling struct {
	// The disk size configuration for the auto-scaling group.
	//
	// required: false
	DiskGB *DiskGB `json:"diskGB,omitempty"`

	// The compute configuration for the auto-scaling group.
	//
	// required: false
	Compute *Compute `json:"compute,omitempty"`
}

// DiskGB is autogenerated from the json schema
type DiskGB struct {
	// Indicates whether disk size configuration is enabled.
	//
	// required: false
	Enabled *bool `json:"enabled,omitempty"`
}

// Compute is autogenerated from the json schema
type Compute struct {
	Enabled          *bool   `json:"enabled,omitempty"`
	ScaleDownEnabled *bool   `json:"scaleDownEnabled,omitempty"`
	MinInstanceSize  *string `json:"minInstanceSize,omitempty"`
	MaxInstanceSize  *string `json:"maxInstanceSize,omitempty"`
}

// Specs is autogenerated from the json schema
type Specs struct {
	DiskIOPS      *string `json:"diskIOPS,omitempty"`
	EbsVolumeType *string `json:"ebsVolumeType,omitempty"`
	InstanceSize  *string `json:"InstanceSize,omitempty"`
	NodeCount     *int    `json:"nodeCount,omitempty"`
}

// InputModel represents the input for creating a cluster.
// swagger:parameters InputModel
type InputModel struct {
	// The ID of the project.
	//
	// required: false
	// example: <projectID>
	ProjectId *string `json:"-" example:"<projectID>"`

	// The name of the cluster.
	//
	// required: false
	ClusterName *string `json:"-"`

	// The private key for the cluster.
	//
	// required: false
	PrivateKey *string `json:"-"`

	// The public key for the cluster.
	//
	// required: false
	PublicKey *string `json:"-"`

	// Applications uses this field to determine the cluster size.possible values are "s","m"
	//
	// required: true
	// example: s
	TshirtSize *string `json:"tshirtSize,omitempty" example:"s"`

	// The cloud provider for the cluster.
	//
	// required: false
	// example: AWS
	CloudProvider *string `json:"cloudProvider,omitempty" example:"AWS"`

	// The version of MongoDB for the cluster.
	//
	// required: false
	// example: 6.0.9
	MongoDBVersion *string `json:"mongoDBVersion,omitempty" example:"6.0.9"`

	// Indicates whether backups should be retained.
	//
	// required: false
	RetainBackup *string `json:"-"`

	// Tags to the cluster for tagging.
	//
	// required: false
	Tags []Tags `json:"tags,omitempty"`

	// Indicates whether filter should be applied when fetching clusters.
	//
	// required: false
	Filter []Tags `json:"-"`
}

// UpdateInputModel represents the input for updating a cluster.
// swagger:parameters UpdateInputModel
type UpdateInputModel struct {
	// The ID of the project.
	//
	// required: false
	// example: <projectID>
	ProjectId *string `json:"-" example:"<projectID>"`

	// The name of the cluster.
	//
	// required: false
	ClusterName *string `json:"-" example:""`

	// The private key for the cluster.
	//
	// required: false
	// example: <privateKey>
	PrivateKey *string `json:"-" example:"<privateKey>"`

	// The public key for the cluster.
	//
	// required: false
	// example: <publicKey>
	PublicKey *string `json:"-" example:"<publicKey>"`
	// Tags to the cluster for tagging.
	//
	// required: false
	Tags []Tags `json:"tags,omitempty"`
	// The major version of MongoDB for the cluster.
	//
	// required: false
	// example: 6.0
	MongoDBMajorVersion *string `json:"mongoDBMajorVersion,omitempty" example:"6.0"`
}

// Endpoint is autogenerated from the json schema
type Endpoint struct {
	// The ID of the endpoint.
	//
	// required: false
	EndpointID *string `json:"endpointID,omitempty"`

	// The name of the provider for the endpoint.
	//
	// required: false
	ProviderName *string `json:"providerName,omitempty"`

	// The region of the endpoint.
	//
	// required: false
	Region *string `json:"region,omitempty"`
}

func (model InputModel) String() string {
	var projectId, clusterName, TshirtSize, cloudProvider, mongoDBVersion string
	var tags []Tags

	if model.ProjectId != nil {
		projectId = *model.ProjectId
	}
	if model.ClusterName != nil {
		clusterName = *model.ClusterName
	}
	if model.TshirtSize != nil {
		TshirtSize = *model.TshirtSize
	}
	if model.CloudProvider != nil {
		cloudProvider = *model.CloudProvider
	}
	if model.MongoDBVersion != nil {
		mongoDBVersion = *model.MongoDBVersion
	}
	if model.Tags != nil {
		tags = model.Tags
	}

	return fmt.Sprintf("ProjectId: %s, ClusterName: %s, ClusterSize: %s CloudProvider: %s, MongoDBVersion: %s, Tags:%v",
		projectId, clusterName, TshirtSize, cloudProvider, mongoDBVersion, tags)
}

func (m Model) ToString() string {
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return fmt.Sprintf("Error marshaling to JSON: %v", err)
	}
	return string(jsonBytes)
}

func (model UpdateInputModel) ToString() string {
	var projectId, clusterName, mongoDBVersion, mongoDBMajorVersion string

	if model.ProjectId != nil {
		projectId = *model.ProjectId
	}
	if model.ClusterName != nil {
		clusterName = *model.ClusterName
	}
	if model.MongoDBMajorVersion != nil {
		mongoDBMajorVersion = *model.MongoDBMajorVersion
	}

	return fmt.Sprintf("ProjectId: %s, ClusterName: %s, MongoDBVersion: %s, MongoDBMajorVersion: %s",
		projectId, clusterName, mongoDBVersion, mongoDBMajorVersion)
}

type ClusterStatus struct {
	// The message associated with the cluster status.
	//
	// required: false
	Message *string `json:"message,omitempty"`

	// The hostname of the cluster.
	//
	// required: false
	HostName *string `json:"hostname,omitempty"`

	// The status of the cluster.
	//
	// required: false
	Status *string `json:"status,omitempty"`
}
