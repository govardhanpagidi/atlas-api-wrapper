package database_user

import (
	"fmt"

	"github.com/atlas-api-helper/util"
)

type Model struct {
	// The date after which the user should be deleted.
	//
	// required: false
	// example: "2022-01-01"
	DeleteAfterDate *string `json:"deleteAfterDate,omitempty" example:"2022-01-01"`

	// The type of AWS IAM authentication to use.
	//
	// required: false
	// example: "AWS_IAM"
	AWSIAMType *string `json:"awsIAMType,omitempty" example:"AWS_IAM"`

	// The name of the database to which the user should have access.
	//
	// required: false
	// example: "testDatabase"
	DatabaseName *string `json:"databaseName,omitempty" example:"testDatabase"`

	// The labels associated with the user.
	//
	// required: false
	Labels []LabelDefinition `json:"labels,omitempty"`

	// The type of LDAP authentication to use.
	//
	// required: false
	// example: "LDAP"
	LdapAuthType *string `json:"ldapAuthType,omitempty" example:"LDAP"`

	// The type of X.509 authentication to use.
	//
	// required: false
	// example: "X509"
	X509Type *string `json:"x509Type,omitempty" example:"X509"`

	// The password for the user.
	//
	// required: false
	Password *string `json:"password,omitempty"`

	// The ID of the project to which the user belongs.
	//
	// required: false
	// example: "12345"
	ProjectId *string `json:"projectId,omitempty" example:"12345"`

	// The roles associated with the user.
	//
	// required: false
	Roles []RoleDefinition `json:"roles,omitempty"`

	// The scopes associated with the user.
	//
	// required: false
	Scopes []ScopeDefinition `json:"scopes,omitempty"`

	// The username for the user.
	//
	// required: false
	// example: "testUser"
	Username *string `json:"username,omitempty" example:"testUser"`

	// The profile associated with the user.
	//
	// required: false
	Profile *string `json:"profile,omitempty"`
}

// LabelDefinition is autogenerated from the json schema
type LabelDefinition struct {
	// The key of the label.
	//
	// required: false
	// example: "environment"
	Key *string `json:"key,omitempty" example:"environment"`

	// The value of the label.
	//
	// required: false
	// example: "production"
	Value *string `json:"value,omitempty" example:"production"`
}

// RoleDefinition is autogenerated from the json schema
type RoleDefinition struct {
	// The name of the collection to which the role applies.
	//
	// required: false
	// example: "testCollection"
	CollectionName *string `json:"collectionName,omitempty" example:"testCollection"`

	// The name of the database to which the role applies.
	//
	// required: true
	// example: "testDatabase"
	DatabaseName *string `json:"databaseName,omitempty" example:"testDatabase"`

	// The name of the role.
	//
	// required: true
	// example: "testRole"
	RoleName *string `json:"roleName,omitempty" example:"testRole"`
}

// ScopeDefinition is autogenerated from the json schema
type ScopeDefinition struct {
	// The name of the scope.
	//
	// required: false
	// example: "readWrite"
	Name *string `json:"name,omitempty" example:"readWrite"`

	// The type of the scope.
	//
	// required: false
	// example: "database"
	Type *string `json:"type,omitempty" example:"database"`
}

// InputModel represents the input for creating a database user.
// swagger:parameters InputModel
type InputModel struct {
	// The username for the user.
	//
	// required: false
	// example: "testUser"
	Username *string `json:"username,omitempty" example:"testUser"`

	// The password for the user.
	//
	// required: false
	// example: "testPass"
	Password *string `json:"password,omitempty" example:"testPass"`

	// The public key for the user.
	//
	// required: false
	PublicKey *string `json:"-"`

	// The private key for the user.
	//
	// required: false
	PrivateKey *string `json:"-"`

	// The ID of the project to which the user belongs.
	//
	// required: false
	// example: "<projectID>"
	ProjectId *string `json:"-" example:"<projectID>"`

	// The roles associated with the user.
	//
	// required: false
	Roles []RoleDefinition `json:"roles,omitempty"`
}

// UpdateInputModel represents the input for updating a database user.
// swagger:parameters UpdateInputModel
type UpdateInputModel struct {
	// The username for the user.
	//
	// required: false
	// example: "testUser"
	Username *string `json:"-" example:"testUser"`

	// The public key for the user.
	//
	// required: false
	PublicKey *string `json:"-"`

	// The private key for the user.
	//
	// required: false
	PrivateKey *string `json:"-"`

	// The ID of the project to which the user belongs.
	//
	// required: false
	// example: "<projectID>"
	ProjectId *string `json:"-" example:"<projectID>"`

	// The roles associated with the user.
	//
	// required: false
	Roles []RoleDefinition `json:"roles,omitempty"`
}

func (model InputModel) String() string {
	return fmt.Sprintf(
		"Username: %s, ProjectId: %s",
		util.ToString(model.Username),
		util.ToString(model.ProjectId),
	)
}

func (model UpdateInputModel) String() string {
	return fmt.Sprintf(
		"Username: %s, ProjectId: %s",
		util.ToString(model.Username),
		util.ToString(model.ProjectId),
	)
}
